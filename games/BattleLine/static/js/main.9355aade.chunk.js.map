{"version":3,"sources":["../../sharedEntities/game.js","../../sharedEntities/card.js","images/Red_flag.png","images/card_back.png","../../sharedEntities/flag.js","../../sharedEntities/play.js","components/CardHolderComp/CardHolderComp.jsx","components/FlagComp/FlagComp.jsx","components/troopDeckComp/TroopDeck.jsx","components/cardComp/CardComp.jsx","components/handPlayerComp/HandPlayerComp.jsx","components/utilitiesFunc/showMessages.js","components/gameStatusComp/GameStatusComp.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","require","Flag","Game","p1ID","p2ID","this","turn","troopDeck","flags","players","player","getPlayersIDArray","generateRandom","turnStatus","playStatus","value","numberOfValues","color","numberOfColors","push","shuffle","i","numberOfFlags","playerID","length","initialDraw","pop","card","flagNumber","handContainsTroopCard","play","indiceBorrar","isSameCardAs","splice","drawStatus","cardDrawn","noCard","claimStatus","claim","endTurnStatus","getOtherPlayerID","playersID","hasWonTheGame","flagsWon","filter","flag","isTakenBy","get3ConsecutiveFlags","Object","keys","id","orderedFlagsWon","sort","flag1","flag2","position","consecutiveFlags","array","swapInArray","pos1","pos2","aux","cap","Math","floor","random","hand","statusNames","module","exports","colorNames","red","green","blue","yellow","purple","orange","names","Play","sides","otherPID","isBetterHand","a","b","join","hand_","getSortedCopy","every","reduce","total","current","Host","isSameColor","isConsecutive","Wedge","isSameValues","Phalanx","Battalion","Skirmush","hand1","hand2","hand1Type","getTypeHand","hand2Type","getScore","playNames","CardHolderComp","props","state","className","Component","FlagComp","currentAction","handleClaimFlag","handleClickFlag","pID","map","key","flagInfo","taken","classes","selectedCard","onClick","handleClick","renderSide","renderImageClassesStatus","src","flagImage","alt","TroopDeckComp","cardsLeft","handleTroopDraw","cardBackImage","CardComp","handleCardClick","newCardSelected","newWhoSelectedCard","handleSelectedCard","HandPlayerComp","setState","c","renderCards","Message","fade","setTimeout","renderingComponent","remove","kind","message","showMessage","mainContainer","document","querySelector","messageInDOM","createElement","appendChild","ReactDOM","render","GameStatusComp","handleEndTurn","class","turnID","renderAction","renderEndTurn","App","player1ID","player2ID","game","newGame","hands","slice","whoSelectedCard","Array","fill","e","pos","bind","setNewGame","playTroop","flagsCopy","handState","drawnCard","drawTroopCard","newHands","endTurn","handleReset","TroopDeck","React","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9355aade.chunk.js","sourcesContent":["'use strict';\nconst Card = require('./card');\nconst Flag = require('./flag');\n\n\n/**\n * Handles the game logic.\n * - Right now there are no tactics cards, only troops.\n * - Each player is represented by his ID and hand.\n * - Keep tracks of the turn to avoid illegal plays.\n * - Only performs actions if the action is a legal movement. Each turn is based in 4 actions:\n *      - (0) Play a card. The player MUST play a card at the beginning of his turn.\n *      - (1) Draw a card. After the player play, he must draw a card.\n *      - (2) Claim flag. It is optional. At the end of the turn a player can claim a flag. If it success, you can repeat until a claim fails.\n *      - (3) End turn. After the claiming phase, the player MUST end his turn.\n */\nclass Game{\n\n    constructor(p1ID, p2ID){ //IMPORTANT. Player IDs must be STRINGS.\n        this.turn = null;\n        this.troopDeck = [];\n        this.flags = [];\n        this.players = { //players and hands.\n            [p1ID]: [],\n            [p2ID]: []\n        };\n    }\n\n    /**\n     * Creates a new game. \n     * - Flips a coin for player turn.\n     * - Generates deck and shuffles it.\n     * - Empty hands for players.\n     */\n    newGame(){\n        this.turn = {\n            player: this.getPlayersIDArray()[Game.generateRandom(2)],\n            turnStatus :Game.playStatus\n        };\n            \n        //Shuffle \n        this.troopDeck = [];\n        for(let value = 0; value < Card.numberOfValues; value++){\n            for(let color = 0; color < Card.numberOfColors; color++){\n                this.troopDeck.push(new Card(value, color));\n            }\n        }\n        Game.shuffle(this.troopDeck);\n\n        //Prepare the flags\n        this.flags = [];\n        for(let i = 0; i < Game.numberOfFlags; i++){\n            this.flags.push(\n                new Flag(this.getPlayersIDArray()[0], this.getPlayersIDArray()[1], i) \n            );\n        }\n\n        // Hand out players' cards\n        for(let playerID in this.players){\n            this.players[playerID] = [];\n            while(this.players[playerID].length < Game.initialDraw){\n                this.players[playerID].push(this.troopDeck.pop());\n            }\n        }\n    }\n\n\n    /**\n     * The player \"playerID\" plays the card \"card\" in the flag number \"flagNumber\".\n     * Only works if:\n     * - It is the player's turn.\n     * - It is the playing phase.\n     * - The player has that card in his hand\n     * @param {*} playerID \n     * @param {*} card \n     */\n    playTroop(playerID, card, flagNumber){\n        if(\n            !this.players[playerID] ||                                  //Player correct\n            this.turn.player != playerID ||                             //it is his turn\n            this.turn.turnStatus !== Game.playStatus ||                 //phase of playing\n            flagNumber < 0 ||                                           //Flag in range [0,9]\n            flagNumber >= Game.numberOfFlags ||\n            ! Game.handContainsTroopCard(this.players[playerID], card)  //the player has this card in his hand\n        ){\n            return false;\n        }\n\n        if(this.flags[flagNumber].play(playerID, card)){\n            //Remove the used card from the player's hand: //REMOVES ONLY THE FIRST CARD IF THERE ARE DUPLICATES.\n            let indiceBorrar\n            for(indiceBorrar = 0; this.players[playerID]; indiceBorrar++){\n                if(this.players[playerID][indiceBorrar].isSameCardAs(card)){\n                    break;\n                }\n            }\n            this.players[playerID].splice(indiceBorrar,1); //Remove 1 position.\n            this.turn.turnStatus = Game.drawStatus;\n            return true;\n        }\n        return false;\n    }\n\n\n\n    /**\n     * Draw a troop card from the table to the playerID's hand.\n     * - The playerID must be correct.\n     * - If there aren't more cards in the troopdeck, then return a Card.noCard.\n     * @param {*} playerID \n     * @returns false if you couldn't draw the card.\n     * @returns If draw is allowed, return the card drawed.\n     */\n    drawTroopCard(playerID){\n        if( (!this.players[playerID]) ||\n            (this.turn.player != playerID) ||\n            (this.turn.turnStatus !== Game.drawStatus) \n            ){\n            return false;\n        }\n        //TODO: REVIEW WHAT HAPPENS WHEN ALL CARDS ARE HANDED OUT.\n        let cardDrawn;\n        if(this.troopDeck.length > 0){\n            cardDrawn = this.troopDeck.pop();\n            this.players[playerID].push(cardDrawn);\n        } else{\n            cardDrawn = Card.noCard;\n        }\n        \n        this.turn.turnStatus = Game.claimStatus;\n        return cardDrawn;\n    }\n\n\n    \n    claim(playerID, flagNumber){\n        if(\n            !this.players[playerID] ||\n            this.turn.player != playerID ||\n            this.turn.turnStatus !== Game.claimStatus ||\n            flagNumber < 0 ||\n            flagNumber >= Game.numberOfFlags\n        ){\n            return false;\n        }\n        if(this.flags[flagNumber].claim(playerID)){ //Claim success if return >= 0\n            return true;\n        }\n        this.turn.turnStatus = Game.endTurnStatus;\n        return false;\n    }\n\n    /**\n     * The turn can be finished in the claim or \"endTurn\" stage\n     * @param {*} playerID \n     */\n    endTurn(playerID){\n        if(\n            !this.players[playerID] ||\n            this.turn.player != playerID ||\n            (this.turn.turnStatus !== Game.endTurnStatus && this.turn.turnStatus !== Game.claimStatus) //can finish turn in claim Stage\n        ){\n            return false;\n        }\n        this.turn.player = this.getOtherPlayerID(this.turn.player);\n        this.turn.turnStatus = Game.playStatus;\n        return true;\n    }\n\n\n    /**\n     * Performs a query to check who has won this game.\n     * - Return the player ID of the winner.\n     * - If the game hasn't ended yet, return false.\n     */\n    whoWonTheGame(){\n        let playersID = this.getPlayersIDArray();\n        for(let playerID of playersID){\n            if(this.hasWonTheGame(playerID)){\n                return playerID;\n            }\n        }\n        return false;\n    }\n\n    //UTILITIES\n\n    /**\n     * Return true if this player has won the game. Win conditions are:\n     * - Get 3 consecutive flags.\n     * - Get 5 of ther 9 flags.\n     * @param {*} playerID \n     */\n    hasWonTheGame(playerID){\n        let flagsWon = this.flags.filter(flag => flag.isTakenBy == playerID);\n        if(flagsWon.length >= 5){\n            return true; //5 flags is a win.\n        }\n        if(Game.get3ConsecutiveFlags(flagsWon)){\n            return true // 3 consecutive flags is a win.\n        }\n        return false; //Any other case is a game in progress.\n    }\n\n    /**\n     * Return true if there are 3 consecutive flags (by position) in the flag array.\n     * @param {*} flagsWon \n     */\n    static get3ConsecutiveFlags(flagsWon){\n        let orderedFlagsWon = flagsWon.sort((flag1, flag2) => flag1.position - flag2.position ); //From lower to higher\n        let consecutiveFlags = 1;\n        for(let i = 0; i < orderedFlagsWon.length -1; i++){\n            if(orderedFlagsWon[i].position +1 == orderedFlagsWon[i+1].position){\n                consecutiveFlags ++;\n                if(consecutiveFlags == 3){\n                    return true;\n                }\n            }else{\n                consecutiveFlags = 1;\n            }\n        }\n        return false;\n    }\n\n\n\n\n    /**\n     * Return an array with the players IDS\n     */\n    getPlayersIDArray(){\n        return Object.keys(this.players);\n    }\n\n    //Returns the other player id\n    getOtherPlayerID(playerID){\n        for(let id in this.players){\n            if (id != playerID){\n                return id;\n            }\n        }\n        return null;\n    }\n\n    getIDPlayerTurn(){\n        return this.turn.player;\n    }\n\n\n    /**\n     * Shuffles an array by shapping all his positions.\n     * @param {Array} array \n     */\n    static shuffle(array){\n        for(let i = 0; i < array.length; i++){\n            Game.swapInArray(array, i, Game.generateRandom(array.length));\n        }\n    }\n\n    static swapInArray(array,pos1,pos2){\n        let aux = array[pos1];\n        array[pos1] = array[pos2];\n        array[pos2] = aux;\n    }\n\n    /**\n     * Generates a random value [0,cap)\n     * @param {*} cap \n     */\n    static generateRandom(cap){\n        return Math.floor(Math.random()*cap);\n    }\n\n    static handContainsTroopCard(hand, card){\n        for(let cardInHand of hand){\n            if(cardInHand.isSameCardAs(card)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n}\n\nGame.numberOfFlags = 9;\nGame.initialDraw = 7;\n\nGame.playStatus = 0;\nGame.drawStatus = 1;\nGame.claimStatus = 2;\nGame.endTurnStatus = 3;\nGame.statusNames = ['Play a card','Draw a card','Claim a Flag', 'Finish turn'];\n\n\nmodule.exports = Game;","'use strict'\n\nclass Card {\n    \n    constructor(value, color){\n        this.value = value;\n        this.color = color;\n    }\n\n    toString(){\n        return `[${this.value}-${Card.colorNames[this.color]}]`\n    }\n\n    isSameCardAs(card){\n        return this.value === card.value && this.color === card.color;\n    }\n\n\n}\n\n//Static vars\nCard.red = 0;\nCard.green = 1;\nCard.blue = 2;\nCard.yellow = 3;\nCard.purple = 4;\nCard.orange = 5;\nCard.colorNames =['red', 'green', 'blue', 'yellow', 'purple', 'orange'];\nCard.numberOfColors = 6;\n\nCard.names = [\n    'Skirmishers',\n    'Peltasts',\n    'Javalineers',\n    'Hoplites',\n    'Phalangists',\n    'Hypaspists',\n    'Light Cavary',\n    'Heavy Cavary',\n    'Chariots',\n    'Elephants'\n];\nCard.numberOfValues = 10;\nCard.noCard = new Card(-1,-1); //Used when no card is handed out.\n\nmodule.exports = Card;","module.exports = __webpack_public_path__ + \"static/media/Red_flag.17e71f16.png\";","module.exports = __webpack_public_path__ + \"static/media/card_back.8698b6a0.png\";","'use strict';\n\nconst Card = require('./card');\nconst Play = require('./play');\n/**\n * Represents a Flag in the Game.\n * - The flag can be taken by a player. Initially it is not taken.\n * - Each player can only play cards in one of the sides of the flag.\n * - Player IDs must be String type.\n */\nmodule.exports = class Flag{\n    constructor(p1ID, p2ID, position){ //IMPORTANT ID's MUST BE STRINGS!!!\n        this.position = position\n        this.sides = {\n            [p1ID] : [], //the value of p1ID is the attribute.\n            [p2ID] : []\n        };\n        this.isTakenBy = null;\n    }\n\n    /**\n     * Player, \"playerID\" in his turn plays a card in this Flag\n     * @param {*} card \n     * @returns true is card could be played \n     */\n    play(playerID, card){\n        if(this.isTakenBy !== null){\n            return false;\n        }\n        if(this.sides[playerID] && this.sides[playerID].length >= 3){\n            return false;\n        }\n        this.sides[playerID].push(card);\n        return true;\n    }\n\n    /**\n     * Player tries to claim this flag. \n     * - Can't claim already taken flags.\n     * //TODO: To claim now, the flag must be full.\n     * @param {*} playerID \n     */\n    claim(playerID){\n        //TODO\n        //This must be redone. Now you can only claim if both sides are full.\n        // A Easy approach would be passing an array of cards with all the other visible cards in the board.\n        let otherPID = this.getOtherPlayerID(playerID);\n        if(this.isTakenBy !== null){\n            return false;\n        }\n        if((this.sides[playerID] && this.sides[playerID].length < 3) || \n            (this.sides[otherPID] && this.sides[otherPID].length < 3)){\n            return false;\n        }\n        if(Play.isBetterHand(this.sides[playerID], this.sides[otherPID]) >= 0){ //TODO: Now you can claim same value plays\n            this.isTakenBy = playerID;\n            return true;\n        }\n        return false\n    }\n\n    \n    //Returns the other player id\n    getOtherPlayerID(playerID){\n        for(let id in this.sides){\n            if (id != playerID){\n                return id;\n            }\n        }\n        return null;\n    }\n\n\n}","'use strict';\n\nclass Play{\n\n    /**\n     * Return a copy of the sorted hand\n     * @param {Hand} hand \n     */\n    static getSortedCopy(hand){ \n        return hand.sort((a,b)=>a.value-b.value);\n    }\n\n    static printPlay(hand){\n        return hand.join(\" \");\n    }\n\n    static isConsecutive(hand_){\n        let hand = this.getSortedCopy(hand_);\n        for(let i = 0; i < hand.length - 1; i++){\n            if(hand[i].value+1 !== hand[i+1].value){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    static isSameColor(hand){\n        return hand.every(card=> card.color === hand[0].color);\n    }\n\n    static isSameValues(hand){\n        return hand.every(card=> card.value === hand[0].value);\n    }\n\n    static getScore(hand){\n        return hand.reduce(\n            (total,current) => total+=current.value,\n            0\n        );\n    }\n\n    /**\n     * \"The\" Method for Play. Return the power of the hand. \n     */\n    static getTypeHand(hand){\n        if(hand.length < 3){\n            return Play.Host;\n        }\n\n        if(Play.isSameColor(hand) && Play.isConsecutive(hand)){\n            return Play.Wedge;\n        }\n\n        if(Play.isSameValues(hand)){\n            return Play.Phalanx;\n        }\n\n        if(Play.isSameColor(hand)){\n            return Play.Battalion;\n        }\n\n        if(Play.isConsecutive(hand)){\n            return Play.Skirmush;\n        }\n\n        return Play.Host;\n        \n    }\n\n    /**\n     * Return positive if hand1 is higher than hand2. 0 if equal. Negative if worse.\n     * @param {*} hand1 \n     * @param {*} hand2 \n     */\n    static isBetterHand(hand1, hand2){\n        let hand1Type = Play.getTypeHand(hand1);\n        let hand2Type = Play.getTypeHand(hand2);\n    \n        if(hand1Type === hand2Type){\n            return Play.getScore(hand1) - Play.getScore(hand2);\n        } \n        return hand1Type - hand2Type;  \n        \n    }\n\n}\n\n\nPlay.Wedge = 4; //Same colour, consecutive values.\nPlay.Phalanx = 3; //Same value.\nPlay.Battalion = 2; //Same colour,\nPlay.Skirmush = 1; //Consecutive values, distinct colour\nPlay.Host = 0; //Any other\nPlay.playNames = ['Host','Skirmush','Battalion','Phalanx','Wedge'];\n\nmodule.exports = Play;\n\n","import React, { Component } from 'react';\nimport './CardHolderCompcss.scss';\n\n\nclass CardHolderComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n           \n         }\n    }\n    render() { \n\n        if(!this.props.card){\n            return <div className=\"card-holder--empty\"></div>;\n        }\n        else{\n            return ( \n                <div className={\"card-holder card-holder--bg-color-\" + this.props.card.color}>\n                    {this.props.card.value}         \n                </div>\n             );\n        }\n        \n    }\n}\n \nexport default CardHolderComp;","import React, { Component } from 'react';\nimport './FlagCompcss.scss';\nimport flagImage from '../../images/Red_flag.png';\nimport CardHolderComp from '../CardHolderComp/CardHolderComp';\nimport Game from '../../sharedEntities/game';\n\nclass FlagComp extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n        } \n        \n    }\n\n\n    handleClick(){\n        if(this.props.currentAction === Game.claimStatus){\n            this.props.handleClaimFlag(this.props.position);\n        }\n        this.props.handleClickFlag(this.props.position);\n        \n\n        \n    }\n\n\n    renderSide(pID){\n        return (\n            [2,1,0].map(position =>\n                <CardHolderComp key={position} card={this.props.flagInfo.sides[pID][position]}></CardHolderComp>\n            )\n        );\n    }\n\n    renderImageClassesStatus(){\n        if(this.props.flagInfo.taken){ //If taken dont animate\n            return \"flag-image--grayscale\";\n        }\n\n        let classes = \"flag-image\";\n        \n        if(this.props.currentAction === Game.claimStatus || this.props.selectedCard ){\n            classes += \" flag-image--bouncing\";\n        }\n        return classes;\n    }\n\n\n    render() { \n        return ( \n            <div className=\"flag\" onClick={()=>this.handleClick()}>\n                {this.renderSide(this.props.p1ID)}\n                <img className={this.renderImageClassesStatus()} src={flagImage} alt=\"red flag\" />\n                {this.renderSide(this.props.p2ID)}\n            </div>\n         );\n    }\n}\n \nexport default FlagComp;","import React, { Component } from 'react';\nimport cardBackImage from '../../images/card_back.png';\nimport './troopDeckcss.scss';\n\n\nclass TroopDeckComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { cardsLeft : 60 }\n    }\n\n   \n\n    render() { \n        return ( \n            <div className=\"deck\" onClick={this.props.handleTroopDraw}>\n                <img className=\"deckImage\" src={cardBackImage} alt=\"deck\" />\n                <p>{this.state.cardsLeft}</p>\n            </div>\n         );\n    }\n}\n \nexport default TroopDeckComp;","import React, { Component } from 'react';\n\nimport './CardCompcss.scss'\n\nclass CardComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    handleCardClick= ()=>{\n        let newCardSelected = this.props.card;\n        let newWhoSelectedCard = this.props.playerID;\n        if( this.props.selectedCard && this.props.selectedCard.isSameCardAs(this.props.card) ){\n            newCardSelected = null;\n            newWhoSelectedCard = null;\n        }\n        this.props.handleSelectedCard(newCardSelected, newWhoSelectedCard);\n    }\n\n\n    render() { \n        return ( \n            <div className=\"aspect-container\">\n            <div className=\"aspect-125\"></div>\n            <div onClick={this.handleCardClick} className={\"card card--bg-color-\" + this.props.card.color + \" \" +(this.props.selectedCard && this.props.selectedCard.isSameCardAs(this.props.card) ? \"card--selected\" : \"\")}>\n                <div className=\"card--top-left-corner\">{this.props.card.value}</div>\n                <div className=\"card-middle\">\n                </div>\n                <div className=\"card--bottom-right-corner\">{this.props.card.value}</div>\n            </div>\n        </div>\n         );\n    }\n}\n \nexport default CardComp;\n\n\n","import React, { Component } from 'react';\nimport CardComp from '../cardComp/CardComp';\n\nimport './HandPlayerCompcss.scss';\n\nclass HandPlayerComp extends Component {\n    constructor(props) {\n        super(props);\n        this.setState = {};\n    }\n\n\n    renderCards() {\n        return (\n            this.props.hand.map(c =>\n                <CardComp key={c} card={c} selectedCard={this.props.selectedCard} handleSelectedCard={this.props.handleSelectedCard} playerID={this.props.playerID}></CardComp>\n            )\n        );\n\n    }\n\n    render() {\n        return (\n            <div>\n                <h4 className=\"centered\">{this.props.playerID}</h4>\n                <div className=\"hand-player\">\n                    {this.renderCards()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default HandPlayerComp;","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './showMessages.scss';   \n\n\n\nclass Message extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fade: 'faded'\n        };\n    }\n\n\n    componentDidMount(){\n        //TODO: Is there a better way to handle this with React?\n        setTimeout(()=>{\n            this.setState({fade : ''});\n            setTimeout(()=>{\n                this.setState({fade : 'faded'});\n                setTimeout(()=>{\n                    this.props.renderingComponent.remove();\n                },\n                200);\n            },\n            1000);\n        },\n        3);\n\n        \n        \n    }\n\n    render() { \n        return ( \n            <div className={\"show-message show-message--\"+this.props.kind+\" \"+this.state.fade}>\n                {this.props.message}\n                </div>\n         );\n    }\n}\n \n\n\nfunction showMessage(message, kind){\n    let mainContainer = document.querySelector('#mainContainer');\n    let messageInDOM = document.createElement(\"div\");\n    mainContainer.appendChild(messageInDOM);\n    ReactDOM.render( <Message message={message} renderingComponent={messageInDOM} kind={kind}></Message>, messageInDOM);\n\n}\n\n\nexport default showMessage;\n\n","import React, { Component } from 'react';\nimport Game from '../../sharedEntities/game';\n\nimport './GameStatusCompcss.scss';\n\n\nclass GameStatusComp extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {  }\n    }\n\n\n    renderAction(){\n        return Game.statusNames[this.props.currentAction];\n    }\n\n    renderEndTurn(){\n        \n        return this.props.currentAction === Game.claimStatus || this.props.currentAction === Game.endTurnStatus ? \n        <h2 onClick={this.props.handleEndTurn}>End Turn</h2> \n        : false\n    }\n\n    render() { \n        return ( \n            <div id=\"game-status-container\" >\n                <p class=\"game-status-container--message\">Turn: <span>{this.props.turnID}</span></p>\n                <p class=\"game-status-container--message\">Action: <span>{this.renderAction()}</span></p>\n                <div id=\"game-status-container--end-turn-holder\">\n                    {this.renderEndTurn()}\n                </div>\n            </div>\n         );\n    }\n}\n \nexport default GameStatusComp;","import React from 'react';\nimport './App.scss';\nimport FlagComp from './components/FlagComp/FlagComp'\nimport TroopDeckComp from './components/troopDeckComp/TroopDeck';\nimport HandPlayerComp from './components/handPlayerComp/HandPlayerComp';\nimport Game from './sharedEntities/game';\nimport showMessage from './components/utilitiesFunc/showMessages';\nimport GameStatusComp from './components/gameStatusComp/GameStatusComp';\n\n\n\n\n/**\n * TOOLS TO USE FOR ENHANCING THE GAME:\n * https://aiartists.org/ai-generated-art-tools\n * - Cards images: http://goart.fotor.com/\n * - Backgrounds: https://aiartists.org/ai-generated-art-tools\n */\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.player1ID = \"Jesús\";\n        this.player2ID = \"Ana\"\n\n        this.game = new Game(\"Jesús\", \"Ana\");\n        this.game.newGame();\n\n        this.state = {\n            p1ID : this.player1ID,\n            p2ID : this.player2ID,\n            hands : {\n                [this.player1ID] : this.game.players[this.player1ID].slice(), //Make a copy because online we can't use it directly.\n                [this.player2ID] : this.game.players[this.player2ID].slice()\n            },\n\n            //Selection:\n            selectedCard : null,\n            whoSelectedCard : null,\n\n            //Flags:\n            flags: new Array(9).fill().map((e, pos) => {\n                return {\n                    taken: false,\n                    position: pos,\n                    sides : {\n                        [this.player1ID] : [],\n                        [this.player2ID] : []\n                    }\n                }\n            }),\n\n            //Turn and kind of action:\n            turnID: this.game.turn.player,\n            currentAction: this.game.turn.turnStatus\n\n\n            \n        }\n      \n\n        //Bindings:\n        this.handleSelectedCard = this.handleSelectedCard.bind(this);\n        this.handleClickFlag = this.handleClickFlag.bind(this);\n        this.handleTroopDraw = this.handleTroopDraw.bind(this);\n        this.handleClaimFlag = this.handleClaimFlag.bind(this);\n        this.handleEndTurn = this.handleEndTurn.bind(this);\n    }\n\n\n   \n\n    setNewGame(){\n        this.game.newGame();\n        this.setState({\n            //New Cards in hand\n            hands:{\n                [this.state.p1ID] :this.game.players[this.state.p1ID].slice(),\n                [this.state.p2ID] :this.game.players[this.state.p2ID].slice()\n            },\n            //Flags empty\n            flags: new Array(9).fill().map((e, pos) => {\n                return {\n                    taken: false,\n                    position: pos,\n                    sides : {\n                        [this.player1ID] : [],\n                        [this.player2ID] : []\n                    }\n                }\n            }),\n            //Player and action:\n            turnID: this.game.turn.player,\n            currentAction: this.game.turn.turnStatus\n        })\n    }\n\n    handleReset(){\n        showMessage('New game!!', 'green');\n        this.setNewGame();\n    }\n\n    handleSelectedCard(card, pID){\n        this.setState({selectedCard: card});\n        this.setState({whoSelectedCard: pID});\n    }\n\n    \n    handleClickFlag(position){\n        if((!this.state.selectedCard) || (!this.state.whoSelectedCard)){\n            return;\n        }\n\n        if(this.game.playTroop(this.state.whoSelectedCard, this.state.selectedCard, position)){\n            //Modify the state of the flag to add the card in the site.\n            let flagsCopy = this.state.flags;\n            flagsCopy[position].sides[this.state.whoSelectedCard].push(this.state.selectedCard);\n            this.setState({\n                flags: flagsCopy\n            });\n            //remove used card from player's hand. \n            let handState = this.state.hands;\n            handState[this.state.whoSelectedCard] = this.state.hands[this.state.whoSelectedCard].filter(\n                card => !card.isSameCardAs(this.state.selectedCard)\n                );\n            this.setState({\n                hands : handState\n            });\n            //Next action is Drawing:\n            this.setState({\n                currentAction : Game.drawStatus\n            })\n\n        } else{\n            showMessage(\"You can't make that play\",\"red\");//TODO: Better messages, probably should be handled by the game itself, instead if returning false.\n        }\n        //Nothing selected.\n        this.setState({\n            whoSelectedCard: null,\n            selectedCard : null\n        });\n    }\n \n\n    handleTroopDraw(){\n        let drawnCard = this.game.drawTroopCard(this.state.turnID);\n        if(drawnCard){ //Effective drawn:\n            showMessage(\"Card Drafted\", \"green\");\n            let newHands = this.state.hands;\n            newHands[this.state.turnID].push(drawnCard);\n            this.setState({\n                hands : newHands,\n                currentAction : Game.claimStatus\n            })\n        } else{\n            showMessage(\"You can't make that play\",\"red\");//TODO:\n        }\n    }\n\n\n    handleClaimFlag(position){\n        if(this.game.claim(this.state.turnID, position)){\n            showMessage(\"\"+this.state.turnID+\" claimed the \"+position+\"º flag!!!\",\"green\");//TODO:\n            //Update flags:\n            let flagsCopy = this.state.flags;\n            flagsCopy[position].taken = true;\n            this.setState({\n                flags: flagsCopy\n            });\n        } else{\n            showMessage(\"You can't claim that flag\",\"red\");//TODO:\n            this.setState({\n                currentAction : Game.endTurnStatus\n            })\n        }\n    }\n\n\n    handleEndTurn(){\n        if(this.game.endTurn(this.state.turnID)){\n            showMessage(\"It is the turn of \"+this.game.getOtherPlayerID(this.state.turnID), \"green\");//TODO:\n            this.setState({\n                turnID : this.game.getOtherPlayerID(this.state.turnID),\n                currentAction : Game.playStatus\n            })\n            \n           \n        } else{\n            showMessage(\"You can't finish your turn yet\",\"red\");//TODO:\n            this.setState({\n                currentAction : Game.endTurnStatus\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <div id=\"mainContainer\">\n                <div id=\"reset-game-container\" onClick={()=>this.handleReset()}>\n                    <h2>RESET</h2>\n                </div>\n\n                <GameStatusComp turnID={this.state.turnID} currentAction={this.state.currentAction} handleEndTurn={this.handleEndTurn}></GameStatusComp>\n\n\n                <h1>Battle Line Single Player</h1>\n\n                <HandPlayerComp playerID={this.state.p1ID} hand={this.state.hands[this.state.p1ID]} selectedCard={this.state.selectedCard} handleSelectedCard={this.handleSelectedCard}></HandPlayerComp>\n\n                <div id=\"centralSpace\">\n                    <div id=\"flags\">\n                        {[0,1,2,3,4,5,6,7,8].map(\n                            e=> <FlagComp p1ID={this.state.p1ID} p2ID={this.state.p2ID} flagInfo={this.state.flags[e]} handleClickFlag={this.handleClickFlag} handleClaimFlag={this.handleClaimFlag} key={e} position={e} currentAction={this.state.currentAction} selectedCard={this.state.selectedCard} />\n                        )}\n                    </div>\n                    <div id=\"deckSpace\">\n                        <TroopDeckComp handleTroopDraw={this.handleTroopDraw}></TroopDeckComp>\n                    </div>\n                </div>\n\n                <HandPlayerComp playerID={this.state.p2ID} hand={this.state.hands[this.state.p2ID]} selectedCard={this.state.selectedCard} handleSelectedCard={this.handleSelectedCard}></HandPlayerComp>\n                \n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}